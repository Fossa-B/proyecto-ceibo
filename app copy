require('dotenv').config();
const express = require('express');
const nodemailer = require('nodemailer');
const bodyParser = require('body-parser');
const cors = require('cors');
//const rateLimit = require('express-rate-limit');

const app = express();
const port = process.env.PORT || 3000;

// Middleware: Configurar CORS para dominios específicos

//const corsOptions = {
//    origin: ['https://tu-dominio.com', 'https://www.tu-dominio.com'],
//    methods: ['POST', 'GET'],
//};
//app.use(cors(corsOptions));

// Middleware: Parseo de datos
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());

// Middleware: Servir archivos estáticos
app.use(express.static('public'));

// Middleware: Limitación de solicitudes para prevenir abuso
//const limiter = rateLimit({
    //windowMs: 15 * 60 * 1000, // 15 minutos
    //max: 100 // Límite de solicitudes por IP
//});
//app.use('/submit-form', limiter);

// Ruta para enviar formulario
app.post('/submit-form', async (req, res) => {
    try {
        const { nombre, email, mensaje } = req.body;

        // Validación manual
        const errors = [];
        if (!nombre || nombre.trim() === "") {
            errors.push("El nombre es obligatorio.");
        }
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!email || !emailRegex.test(email)) {
            errors.push("El email no es válido.");
        }
        if (!mensaje || mensaje.trim() === "") {
            errors.push("El mensaje es obligatorio.");
        }

        if (errors.length > 0) {
            return res.status(400).json({ errors });
        }

        // Configuración del transporte de correo con OAuth2 (opcional para mayor seguridad)
        const transporter = nodemailer.createTransport({
            service: 'gmail',
            auth: {
                user: process.env.EMAIL_USER,
                pass: process.env.EMAIL_PASS,
            },
        });

        const mailOptions = {
            from: email,
            to: process.env.EMAIL_USER,
            subject: 'Nuevo mensaje de contacto',
            text: `Nombre: ${nombre}\nEmail: ${email}\nMensaje: ${mensaje}`,
        };

        // Enviar el correo
        const info = await transporter.sendMail(mailOptions);
        res.status(200).json({ message: 'Mensaje enviado con éxito.' });
    } catch (err) {
        console.error(err);
        res.status(500).json({ error: 'Error al enviar el correo.' });
    }
});

// (Opcional) Redirigir "/" a "index.html"
app.get('/', (req, res) => {
    res.sendFile(__dirname + '/public/index.html');
});

// Iniciar el servidor
app.listen(port, () => {
    console.log(`Servidor corriendo en http://localhost:${port}`);
});
